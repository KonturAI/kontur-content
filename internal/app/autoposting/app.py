import asyncio
from datetime import datetime, timedelta

from internal import interface


async def Autoposting(
        tel: interface.ITelemetry,
        publication_service: interface.IPublicationService,
        telegram_client: interface.ITelegramClient,
        openai_client: interface.IOpenAIClient,
        prompt_generator: interface.IPublicationPromptGenerator,
):
    logger = tel.logger()

    logger.info("üöÄ –°–µ—Ä–≤–∏—Å –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")

    while True:
        try:
            logger.info("üîÑ –ù–∞—á–∞—Ç–∞ –Ω–æ–≤–∞—è –∏—Ç–µ—Ä–∞—Ü–∏—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞")

            # 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∏
            logger.info("üìã –ó–∞–ø—Ä–æ—Å –≤—Å–µ—Ö –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
            all_autopostings = await publication_service.get_all_autopostings()
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(all_autopostings)} –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")

            # 2. –§–∏–ª—å—Ç—Ä—É–µ–º –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∏ –ø–æ enabled –∏ last_active
            logger.info("üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å—É –∏ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏...")
            now = datetime.now()
            active_autopostings = []
            disabled_count = 0
            not_ready_count = 0

            for autoposting in all_autopostings:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º enabled
                if not autoposting.enabled:
                    disabled_count += 1
                    logger.debug(f"‚è∏Ô∏è  –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ {autoposting.id} (–æ—Ä–≥: {autoposting.organization_id}) –æ—Ç–∫–ª—é—á–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    continue

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º last_active
                if autoposting.last_active is None:
                    # –ï—Å–ª–∏ last_active –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º
                    logger.info(f"üÜï –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ {autoposting.id} (–æ—Ä–≥: {autoposting.organization_id}) - –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫, –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å")
                    active_autopostings.append(autoposting)
                else:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                    time_since_last_active = now - autoposting.last_active
                    period = timedelta(hours=autoposting.period_in_hours)

                    if time_since_last_active >= period:
                        logger.info(f"‚è∞ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ {autoposting.id} (–æ—Ä–≥: {autoposting.organization_id}) - –ø—Ä–æ—à–ª–æ {time_since_last_active}, –ø–µ—Ä–∏–æ–¥ {period}, –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å")
                        active_autopostings.append(autoposting)
                    else:
                        not_ready_count += 1
                        remaining_time = period - time_since_last_active
                        logger.debug(f"‚è≥ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ {autoposting.id} (–æ—Ä–≥: {autoposting.organization_id}) - –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤, –æ—Å—Ç–∞–ª–æ—Å—å –∂–¥–∞—Ç—å {remaining_time}")

            logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: –≤—Å–µ–≥–æ={len(all_autopostings)}, –∞–∫—Ç–∏–≤–Ω—ã—Ö={len(active_autopostings)}, –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö={disabled_count}, –Ω–µ –≥–æ—Ç–æ–≤—ã—Ö={not_ready_count}")

            if len(active_autopostings) == 0:
                logger.info("üí§ –ù–µ—Ç –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏, –ø–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è")

            # 3. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥
            for autoposting in active_autopostings:
                try:
                    logger.info("‚îÄ" * 60)
                    logger.info(f"üîß –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ ID={autoposting.id}, –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è={autoposting.organization_id}")
                    logger.info(f"üìù –ö–∞–Ω–∞–ª–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {len(autoposting.tg_channels)}, –ø–µ—Ä–∏–æ–¥: {autoposting.period_in_hours} —á–∞—Å–æ–≤")

                    suitable_posts = []

                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∫–∞–Ω–∞–ª
                    for channel_username in autoposting.tg_channels:
                        try:
                            logger.info(f"üì° –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å—Ç–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–∞ @{channel_username}...")

                            # 3. –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ ~100 –ø–æ—Å—Ç–æ–≤
                            posts = await telegram_client.get_channel_posts(
                                channel_id=channel_username,
                                limit=100
                            )

                            logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(posts)} –ø–æ—Å—Ç–æ–≤ –∏–∑ @{channel_username}")

                            # 4. –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ—Å—Ç—ã –∑–∞ –ø–µ—Ä–∏–æ–¥ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞
                            period_start = now - timedelta(hours=autoposting.period_in_hours)
                            recent_posts = [
                                post for post in posts
                                if post['date'] >= period_start
                            ]

                            logger.info(f"üïí –ù–∞–π–¥–µ–Ω–æ {len(recent_posts)} –ø–æ—Å—Ç–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {autoposting.period_in_hours} —á–∞—Å–æ–≤ –≤ @{channel_username}")

                            # –ü–æ–ª—É—á–∞–µ–º —É–∂–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã
                            logger.info(f"üîé –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è @{channel_username}...")
                            viewed_posts = await publication_service.get_viewed_telegram_post(
                                autoposting_id=autoposting.id,
                                tg_channel_username=channel_username
                            )
                            viewed_post_dates = {vp.created_at for vp in viewed_posts}
                            logger.info(f"üìå –ù–∞–π–¥–µ–Ω–æ {len(viewed_post_dates)} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è @{channel_username}")

                            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –ø–æ—Å—Ç
                            empty_posts_count = 0
                            already_viewed_count = 0
                            processed_count = 0

                            for post in recent_posts:
                                try:
                                    post_text = post['text']
                                    post_date = post['date']

                                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –ø–æ—Å—Ç—ã
                                    if not post_text or not post_text.strip():
                                        empty_posts_count += 1
                                        continue

                                    # 5. –ü–æ–º–µ—á–∞–µ–º –ø–æ—Å—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–º
                                    await publication_service.create_viewed_telegram_post(
                                        autoposting_id=autoposting.id,
                                        tg_channel_username=channel_username
                                    )

                                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã
                                    if post_date in viewed_post_dates:
                                        already_viewed_count += 1
                                        continue

                                    processed_count += 1
                                    logger.info(f"ü§ñ –ê–Ω–∞–ª–∏–∑ –ø–æ—Å—Ç–∞ #{processed_count} –∏–∑ @{channel_username} —á–µ—Ä–µ–∑ OpenAI...")

                                    # 6. –§–∏–ª—å—Ç—Ä—É–µ–º —á–µ—Ä–µ–∑ OpenAI
                                    filter_system_prompt = await prompt_generator.get_filter_post_system_prompt(
                                        filter_prompt=autoposting.filter_prompt,
                                        post_text=post_text
                                    )

                                    filter_result, _ = await openai_client.generate_json(
                                        history=[{"role": "user", "content": "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç –ø–æ—Å—Ç"}],
                                        system_prompt=filter_system_prompt,
                                        temperature=0.3,
                                        llm_model="gpt-4o-mini"
                                    )

                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
                                    if filter_result.get("is_suitable", False):
                                        suitable_posts.append({
                                            "text": post_text,
                                            "channel": channel_username,
                                            "link": post.get("link", ""),
                                            "date": post_date
                                        })
                                        logger.info(f"‚úÖ –ü–æ—Å—Ç –∏–∑ @{channel_username} –ø—Ä–æ—à–µ–ª —Ñ–∏–ª—å—Ç—Ä! –ü—Ä–∏—á–∏–Ω–∞: {filter_result.get('reason', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}")
                                    else:
                                        logger.info(f"‚ùå –ü–æ—Å—Ç –∏–∑ @{channel_username} –Ω–µ –ø—Ä–æ—à–µ–ª —Ñ–∏–ª—å—Ç—Ä. –ü—Ä–∏—á–∏–Ω–∞: {filter_result.get('reason', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}")

                                except Exception as post_err:
                                    logger.error(f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ—Å—Ç–∞ –∏–∑ @{channel_username}: {str(post_err)}")
                                    continue

                            logger.info(f"üìà –ò—Ç–æ–≥–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ @{channel_username}: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ={processed_count}, –ø—É—Å—Ç—ã—Ö={empty_posts_count}, —É–∂–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ={already_viewed_count}")

                        except Exception as channel_err:
                            logger.error(f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞–Ω–∞–ª–∞ @{channel_username}: {str(channel_err)}")
                            continue

                    logger.info(f"üéØ –ò—Ç–æ–≥–æ –Ω–∞–π–¥–µ–Ω–æ {len(suitable_posts)} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ {autoposting.id}")

                    # –û–±–Ω–æ–≤–ª—è–µ–º last_active –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤
                    logger.info(f"üíæ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ {autoposting.id}...")
                    await publication_service.update_autoposting(
                        autoposting_id=autoposting.id,
                        last_active=datetime.now()
                    )

                    logger.info(f"‚úÖ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ {autoposting.id} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, last_active –æ–±–Ω–æ–≤–ª–µ–Ω")

                except Exception as autoposting_err:
                    logger.error(f"‚ùó‚ùó –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ {autoposting.id}: {str(autoposting_err)}")
                    continue

            logger.info(f"‚úÖ –ò—Ç–µ—Ä–∞—Ü–∏—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(active_autopostings)} –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–æ–≤")
            logger.info("üò¥ –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞ 30 –º–∏–Ω—É—Ç...")

            # –°–ø–∏–º 30 –º–∏–Ω—É—Ç
            await asyncio.sleep(30 * 60)

        except Exception as err:
            logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞: {str(err)}")
            logger.error("üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç...")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å–ø–∏–º 5 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
            await asyncio.sleep(5 * 60)