import asyncio
import random
import traceback
from datetime import datetime, timedelta

from internal import interface, model


class Autoposting:
    def __init__(
        self,
        tel: interface.ITelemetry,
        publication_service: interface.IPublicationService,
        telegram_client: interface.ITelegramClient,
        openai_client: interface.IOpenAIClient,
        prompt_generator: interface.IPublicationPromptGenerator,
        loom_employee_client: interface.ILoomEmployeeClient,
    ):
        self.tel = tel
        self.logger = tel.logger()
        self.publication_service = publication_service
        self.telegram_client = telegram_client
        self.openai_client = openai_client
        self.prompt_generator = prompt_generator
        self.loom_employee_client = loom_employee_client

    async def run(self):
        self.logger.info("üöÄ –°–µ—Ä–≤–∏—Å –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")

        while True:
            try:
                await self._process_iteration()
                await self._sleep_until_next_iteration()
            except Exception as err:
                await self._handle_critical_error(err)

    async def _process_iteration(self):
        self.logger.info("üîÑ –ù–∞—á–∞—Ç–∞ –Ω–æ–≤–∞—è –∏—Ç–µ—Ä–∞—Ü–∏—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞")

        # –§–∏–ª—å—Ç—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∏
        active_autopostings = await self._get_active_autopostings()

        if not active_autopostings:
            self.logger.info("üí§ –ù–µ—Ç –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏, –ø–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è")
            return

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥
        for autoposting in active_autopostings:
            await self._process_autoposting(autoposting)

        self.logger.info(f"‚úÖ –ò—Ç–µ—Ä–∞—Ü–∏—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(active_autopostings)} –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–æ–≤")

    async def _get_active_autopostings(self) -> list:
        all_autopostings = await self.publication_service.get_all_autopostings()

        now = datetime.now()
        active_autopostings = []
        disabled_count = 0
        not_ready_count = 0

        for autoposting in all_autopostings:
            if not autoposting.enabled:
                disabled_count += 1
                self.logger.debug(f"‚è∏Ô∏è  –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ {autoposting.id} –æ—Ç–∫–ª—é—á–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                continue

            if self._should_process_autoposting(autoposting, now):
                active_autopostings.append(autoposting)
            else:
                not_ready_count += 1

        self.logger.info(
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: –≤—Å–µ–≥–æ={len(all_autopostings)}, "
            f"–∞–∫—Ç–∏–≤–Ω—ã—Ö={len(active_autopostings)}, –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö={disabled_count}, "
            f"–Ω–µ –≥–æ—Ç–æ–≤—ã—Ö={not_ready_count}"
        )

        return active_autopostings

    def _should_process_autoposting(self, autoposting: model.Autoposting, now: datetime) -> bool:
        if autoposting.last_active is None:
            self.logger.info(f"üÜï –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ {autoposting.id} - –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫, –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å")
            return True

        time_since_last_active = now - autoposting.last_active
        period = timedelta(hours=autoposting.period_in_hours)

        if time_since_last_active >= period:
            self.logger.info(f"‚è∞ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ {autoposting.id} - –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å")
            return True
        else:
            remaining_time = period - time_since_last_active
            self.logger.debug(f"‚è≥ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ {autoposting.id} - –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤, –æ—Å—Ç–∞–ª–æ—Å—å –∂–¥–∞—Ç—å {remaining_time}")
            return False

    async def _process_autoposting(self, autoposting: model.Autoposting):
        try:
            self.logger.info("‚îÄ" * 60)
            self.logger.info(
                f"üîß –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ ID={autoposting.id}, "
                f"–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è={autoposting.organization_id}"
            )
            self.logger.info(f"üìù –ö–∞–Ω–∞–ª–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {len(autoposting.tg_channels)}")

            suitable_posts = []

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∫–∞–Ω–∞–ª
            for channel_username in autoposting.tg_channels:
                channel_suitable_posts = await self._process_channel(autoposting, channel_username)
                suitable_posts.extend(channel_suitable_posts)

            self.logger.info(
                f"üéØ –ò—Ç–æ–≥–æ –Ω–∞–π–¥–µ–Ω–æ {len(suitable_posts)} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ {autoposting.id}"
            )

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–æ—Å—Ç—ã
            await self._process_suitable_posts(autoposting, suitable_posts)

            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            await self._update_last_active(autoposting.id)

        except Exception as autoposting_err:
            self.logger.error(
                f"‚ùó‚ùó –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ {autoposting.id}: {str(autoposting_err)}"
            )

    async def _process_channel(self, autoposting: model.Autoposting, channel_username: str) -> list[dict]:
        try:
            self.logger.info(f"üì° –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å—Ç–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–∞ @{channel_username}...")

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã –∏–∑ –∫–∞–Ω–∞–ª–∞
            posts = await self._fetch_channel_posts(channel_username)

            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            recent_posts = self._filter_posts_by_time(posts, autoposting.period_in_hours)
            self.logger.info(
                f"üïí –ù–∞–π–¥–µ–Ω–æ {len(recent_posts)} –ø–æ—Å—Ç–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {autoposting.period_in_hours} —á–∞—Å–æ–≤ –≤ @{channel_username}"
            )

            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã
            viewed_post_links = await self._get_viewed_post_links(autoposting.id, channel_username)

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Å—Ç—ã
            suitable_posts = await self._process_posts(
                autoposting, channel_username, recent_posts, viewed_post_links
            )

            return suitable_posts

        except Exception as channel_err:
            self.logger.error(f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞–Ω–∞–ª–∞ @{channel_username}: {str(channel_err)}")
            return []

    async def _fetch_channel_posts(self, channel_username: str) -> list[dict]:
        posts = await self.telegram_client.get_channel_posts(channel_id=channel_username, limit=100)
        self.logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(posts)} –ø–æ—Å—Ç–æ–≤ –∏–∑ @{channel_username}")
        return posts

    def _filter_posts_by_time(self, posts: list[dict], period_hours: int) -> list[dict]:
        now = datetime.now()
        period_start = now - timedelta(hours=period_hours*3)
        recent_posts = []

        for post in posts:
            post_date = post['date']
            # –ü—Ä–∏–≤–æ–¥–∏–º –¥–∞—Ç—ã –∫ naive —Ñ–æ—Ä–º–∞—Ç—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            if post_date.tzinfo is not None:
                post_date_naive = post_date.replace(tzinfo=None)
            else:
                post_date_naive = post_date

            if post_date_naive >= period_start:
                recent_posts.append(post)

        return recent_posts

    async def _get_viewed_post_links(self, autoposting_id: int, channel_username: str) -> list[str]:
        self.logger.info(f"üîé –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è @{channel_username}...")
        viewed_posts = await self.publication_service.get_viewed_telegram_post(
            autoposting_id=autoposting_id,
            tg_channel_username=channel_username
        )
        viewed_post_links = [vp.link for vp in viewed_posts]

        self.logger.info(f"üìå –ù–∞–π–¥–µ–Ω–æ {len(viewed_post_links)} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è @{channel_username}")
        return viewed_post_links

    async def _process_posts(
        self,
        autoposting,
        channel_username: str,
        recent_posts: list[dict],
        viewed_post_links: list[str],
    ) -> list[dict]:

        suitable_posts = []
        empty_posts_count = 0
        already_viewed_count = 0
        processed_count = 0

        for post in recent_posts:
            try:
                post_text = post['text']
                post_date = post['date']
                post_link = post['link']

                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –ø–æ—Å—Ç—ã
                if not post_text or not post_text.strip():
                    empty_posts_count += 1
                    continue

                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã
                if post_link in viewed_post_links:
                    already_viewed_count += 1
                    continue

                # –ü–æ–º–µ—á–∞–µ–º –ø–æ—Å—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–º

                processed_count += 1
                self.logger.info(f"ü§ñ –ê–Ω–∞–ª–∏–∑ –ø–æ—Å—Ç–∞ #{processed_count} –∏–∑ @{channel_username} —á–µ—Ä–µ–∑ OpenAI...")

                # –§–∏–ª—å—Ç—Ä—É–µ–º —á–µ—Ä–µ–∑ OpenAI
                is_suitable, reason = await self._filter_post_with_ai(
                    autoposting.filter_prompt, post_text
                )

                if is_suitable:
                    suitable_posts.append({
                        "text": post_text,
                        "channel_username": channel_username,
                        "link": post.get("link", ""),
                        "date": post_date,
                    })
                    self.logger.info(f"‚úÖ –ü–æ—Å—Ç –∏–∑ @{channel_username} –ø—Ä–æ—à–µ–ª —Ñ–∏–ª—å—Ç—Ä! –ü—Ä–∏—á–∏–Ω–∞: {reason}")
                    if len(suitable_posts) == 3:
                        return suitable_posts
                else:
                    await self._mark_post_as_viewed(autoposting.id, channel_username, post_link)
                    self.logger.info(f"‚ùå –ü–æ—Å—Ç –∏–∑ @{channel_username} –Ω–µ –ø—Ä–æ—à–µ–ª —Ñ–∏–ª—å—Ç—Ä. –ü—Ä–∏—á–∏–Ω–∞: {reason}")

            except Exception as post_err:
                self.logger.error(f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ—Å—Ç–∞ –∏–∑ @{channel_username}: {str(post_err)}")
                continue

        self.logger.info(
            f"üìà –ò—Ç–æ–≥–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ @{channel_username}: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ={processed_count}, "
            f"–ø—É—Å—Ç—ã—Ö={empty_posts_count}, —É–∂–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ={already_viewed_count}"
        )

        return suitable_posts

    async def _mark_post_as_viewed(self, autoposting_id: int, channel_username: str, link: str):
        await self.publication_service.create_viewed_telegram_post(
            autoposting_id=autoposting_id,
            tg_channel_username=channel_username,
            link=link
        )

    async def _filter_post_with_ai(self, filter_prompt: str, post_text: str) -> tuple[bool, str]:
        filter_system_prompt = await self.prompt_generator.get_filter_post_system_prompt(
            filter_prompt=filter_prompt,
            post_text=post_text
        )

        filter_result, _ = await self.openai_client.generate_json(
            history=[{"role": "user", "content": "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç –ø–æ—Å—Ç"}],
            system_prompt=filter_system_prompt,
            temperature=1,
            llm_model="gpt-5",
        )

        is_suitable = filter_result.get("is_suitable", False)
        reason = filter_result.get("reason", "–Ω–µ —É–∫–∞–∑–∞–Ω–∞")

        return is_suitable, reason

    async def _process_suitable_posts(self, autoposting: model.Autoposting, suitable_posts: list[dict]):
        if not suitable_posts:
            self.logger.info(f"üì≠ –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ {autoposting.id}")
            return

        selected_post = random.choice(suitable_posts)
        self.logger.info(f"üé≤ –í—ã–±—Ä–∞–Ω —Å–ª—É—á–∞–π–Ω—ã–π –ø–æ—Å—Ç {selected_post['link']} –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
        await self._mark_post_as_viewed(autoposting.id, selected_post['channel_username'], selected_post['link'])

        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            publication_data = await self.publication_service.generate_autoposting_publication_text(
                autoposting_category_id=autoposting.autoposting_category_id,
                source_post_text=selected_post['text']
            )
            self.logger.info(
                f"‚úÖ –¢–µ–∫—Å—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ {autoposting.id}"
            )

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            image_url = None
            if autoposting.need_image:
                images_url = await self.publication_service.generate_autoposting_publication_image(
                    autoposting_category_id=autoposting.autoposting_category_id,
                    publication_text=publication_data['text']
                )
                image_url = images_url[0]

            employees = await self.loom_employee_client.get_employees_by_organization(autoposting.organization_id)

            moderators = [employee for employee in employees if employee.role == "moderator"]

            publication_id = await self.publication_service.create_publication(
                organization_id=autoposting.organization_id,
                category_id=autoposting.autoposting_category_id,
                creator_id=0,
                text_reference=selected_post['text'],
                text=publication_data['text'],
                moderation_status="moderation",
                image_url=image_url
            )

            await self.publication_service.change_publication(
                publication_id=publication_id,
                tg_source=True
            )

            if not moderators:
                await self.publication_service.moderate_publication(
                    publication_id=publication_id,
                    moderator_id=0,
                    moderation_status="approved",
                    moderation_comment=""
                )

            self.logger.info(
                f"üé® –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ {autoposting.id}: {image_url}"
            )

        except Exception as gen_err:
            self.logger.error(
                f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–ª—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ {autoposting.id}: {str(gen_err)}",
            {"traceback": traceback.format_exc()}
            )

    async def _update_last_active(self, autoposting_id: int):
        await self.publication_service.update_autoposting(
            autoposting_id=autoposting_id,
            last_active=datetime.now()
        )
        self.logger.info(f"‚úÖ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ {autoposting_id} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, last_active –æ–±–Ω–æ–≤–ª–µ–Ω")

    async def _sleep_until_next_iteration(self):
        self.logger.info("üò¥ –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞ 30 –º–∏–Ω—É—Ç...")
        await asyncio.sleep(1 * 60)

    async def _handle_critical_error(self, err: Exception):
        self.logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞: {str(err)}")
        self.logger.error("üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç...")
        await asyncio.sleep(1 * 60)
